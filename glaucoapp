<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>FullJob Workspace</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    *{margin:0;padding:0;box-sizing:border-box}
    body{font-family:'Segoe UI',Arial,sans-serif;background:#f8f9fa;min-height:100vh;display:flex;flex-direction:column}
    .container{width:100%;max-width:375px;margin:0 auto 90px auto;flex:1;display:flex;flex-direction:column;align-items:center}
    .settings-header{width:90%;display:flex;justify-content:space-between;align-items:center;margin:28px 0 18px}
    .settings-title{font-size:2rem;font-weight:600;color:#222}
    .profile-pic{width:38px;height:38px;border-radius:50%;object-fit:cover;border:3px solid #fff;box-shadow:0 2px 8px #e4e4e4}
    .settings-grid{display:grid;grid-template-columns:1fr 1fr;gap:18px;width:90%;margin-bottom:32px}
    .settings-card{background:#fff;border-radius:18px;box-shadow:0 2px 8px rgba(75,0,160,.07);padding:22px 0 12px;display:flex;flex-direction:column;align-items:center;cursor:pointer;transition:box-shadow .13s}
    .settings-card:hover{box-shadow:0 4px 18px rgba(75,0,160,.12)}
    .icon{width:40px;height:40px;margin-bottom:12px;background:#7e44e6;border-radius:50%;display:flex;align-items:center;justify-content:center;color:#fff;font-size:1.6rem}
    .label{font-size:1rem;font-weight:500;color:#252525;text-align:center}
    .modal-bg{display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,.45);justify-content:center;align-items:center;z-index:99}
    .modal-bg.open{display:flex}
    .modal-main{background:#fff;padding:24px;border-radius:20px;box-shadow:0 2px 24px rgba(40,70,140,.15);max-width:95vw;width:320px;display:flex;flex-direction:column;align-items:center;gap:14px;position:relative}
    .close-btn{position:absolute;right:14px;top:14px;border:none;background:none;font-size:1.5rem;color:#888;cursor:pointer}
    .btn{background:#3576f6;color:#fff;border:none;border-radius:18px;padding:10px 22px;font-size:1rem;font-weight:500;cursor:pointer;box-shadow:0 2px 8px rgba(53,118,246,.1)}
    .btn:hover{background:#2254a6}
    .status-msg{font-size:.95rem;color:#2254a6;text-align:center}
    .audio-player{width:100%;margin-top:10px}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/lamejs@1.2.0/lame.min.js"></script>
  <script src="https://accounts.google.com/gsi/client" async defer></script>
  <script src="https://apis.google.com/js/api.js" async defer></script>
</head>
<body>
  <div class="container">
   <div class="settings-header">
  <span class="settings-title">Painel de Controle</span>
  <div id="logoArea" style="cursor:pointer;display:flex;flex-direction:column;align-items:center;">
    <img id="profileLogo" class="profile-pic" src="https://drive.google.com/thumbnail?id=1xG9c2LJaXOM6O6vLhU-8zt_rTl272tbg" alt="Logo">
  </div>
</div>

    <div class="settings-grid">
      <div class="settings-card" id="cardGravar">
        <div class="icon">üé§</div><div class="label">Gravar √Åudio</div>
      </div>

      
<div class="settings-card" id="cardEnviarPdf"><div class="icon">üìë</div><div class="label">Enviar PDF</div></div>

      
      <div class="settings-card"><div class="icon">üéµ</div><div class="label">Meus √Åudios</div></div>
      <div class="settings-card"><div class="icon">üìÇ</div><div class="label">Meus Projetos</div></div>
      <div class="settings-card"><div class="icon">üîë</div><div class="label">Login Google</div></div>
      <div class="settings-card no-func"><div class="icon">‚öôÔ∏è</div><div class="label">Configura√ß√£o</div></div>
    </div>
  </div>
  <!-- MODAL GRAVADOR DE √ÅUDIO -->
  <div class="modal-bg" id="modalGravador">
    <div class="modal-main">
      <button class="close-btn" id="btnCloseGravador" type="button">&times;</button>

<!-- √çcone de pastinha para abrir modal de arquivos de atas -->
<button id="btnPastinhaReunioes" class="btn" style="background:#f3f7fc; color:#3576f6; border:1.5px solid #bcd4f6; font-size:1.1rem; width:160px; margin-bottom:8px; display:flex; align-items:center; gap:8px;"
  type="button"
  onclick="abrirPastasReunioes()">
  <img src="https://drive.google.com/thumbnail?id=1DQYY3oe21_PFXT1Sq10ZZX_-mEyOiFsJ" alt="Pastinha" style="width:22px;height:22px;"> Arquivos
</button>

      
      <h3>Gravador de √Åudio</h3>
           
      <div style="display:flex;gap:12px;flex-wrap:wrap;justify-content:center;">
        <button class="btn" id="btnGravar" type="button">‚è∫Ô∏è Gravar</button>
        <button class="btn" id="btnPausar" type="button" disabled>‚è∏Ô∏è Pausar</button>
        <button class="btn" id="btnParar" type="button" disabled>‚èπÔ∏è Parar</button>
      </div>
      <audio id="audioPlayer" class="audio-player" controls style="display:none;"></audio>
      <button class="btn" id="btnUpload" style="width:100%;display:none;" type="button">Salvar no Google Drive</button>
      <div id="statusMsg" class="status-msg"></div>
    </div>
  </div>

<!-- MODAL UPLOAD PDF -->
<div class="modal-bg" id="modalLerProjeto">
  <div class="modal-main">
    <button class="close-btn" id="btnCloseLerProjeto" type="button">&times;</button>

    <button id="btnPastinhaReunioesPdf" class="btn" style="background:#f3f7fc; color:#3576f6; border:1.5px solid #bcd4f6; font-size:1.1rem; width:160px; margin-bottom:8px; display:flex; align-items:center; gap:8px;"
  type="button"
  onclick="abrirPastasReunioes()">
  <img src="https://drive.google.com/thumbnail?id=1DQYY3oe21_PFXT1Sq10ZZX_-mEyOiFsJ" alt="Pastinha" style="width:22px;height:22px;"> Arquivos
</button>

    <h3>Enviar PDF de Projeto</h3>
    <input type="file" id="inputPdf" accept="application/pdf" style="margin-bottom:16px;">
    <div id="pdfFileName" style="font-size:1rem; color:#2254a6;"></div>
    <button id="btnUploadPdf" class="btn" style="width:100%; display:none;" type="button">Salvar PDF no Google Drive</button>
    <div id="statusMsgPdf" class="status-msg"></div>
  </div>
</div>


  
<script>
  
  // Google Drive params
  const MAX_AUDIO_CHUNK = 23 * 1024 * 1024; // 23 MB
const CLIENT_ID = '1078695213241-k5h9kpca2vfdbj52eu1n9qgn7as995fa.apps.googleusercontent.com';
const API_KEY = 'AIzaSyDyKnas6na8NR_mVwvfefA7nOjTd6Pj1B4';
const SCOPES = 'https://www.googleapis.com/auth/drive.readonly';

const PASTA_ATAS_ID = '1ll1gBwCisRkDv1yv-mYQONa2DckYL4hG';      // ID da pasta de atasrelat√≥rios de reuni√µes
const PASTA_RELATORIOS_ID = '1ZlVzuLDfXxdfJ4CfQNYd2z3qrwn5k4yh'; // ID da pasta de relat√≥rios de projetos

// Adicione as IDs das pastas de arquivos automatizados:
const PASTA_ATAS_AUTOMATIZADAS_ID = '1IzOLHw58P3Wun_H3edDapBBKRT69AC36';
const PASTA_RELATORIOS_AUTOMATIZADOS_ID = '1pw9nA9QpKBMzLEPmQwR_Q73isSpoJAbS';
 


  let accessToken = '';
  let tokenClient = null;

  // DOM elements refs
  let btnGravar, btnPausar, btnParar, audioPlayer, btnUpload, statusMsg, modalGravador, btnCloseGravador;
  let mediaRecorder, audioChunks = [], audioBlob, audioBlobGlobal = null;
  let modalLerProjeto, btnCloseLerProjeto, inputPdf, pdfFileName, btnUploadPdf, statusMsgPdf, pdfBlobGlobal = null;


  window.onload = function() {
    gapi.load('client', () => { gapi.client.init({apiKey: API_KEY}); });
tokenClient = google.accounts.oauth2.initTokenClient({
  client_id: CLIENT_ID,
  scope: SCOPES,
  callback: handleTokenResponse
});

      // LOGIN PRO GOOGLE
document.getElementById('logoArea').onclick = function() {
  tokenClient.requestAccessToken();
};

   
    btnGravar        = document.getElementById('btnGravar');
    btnPausar        = document.getElementById('btnPausar');
    btnParar         = document.getElementById('btnParar');
    audioPlayer      = document.getElementById('audioPlayer');
    btnUpload        = document.getElementById('btnUpload');
    statusMsg        = document.getElementById('statusMsg');
    modalGravador    = document.getElementById('modalGravador');
    btnCloseGravador = document.getElementById('btnCloseGravador');
    profileLogo  = document.getElementById('profileLogo');


      // Elementos do modal das pastas de atas de reuni√µes
  modalPastaReunioes    = document.getElementById('modalPastaReunioes');
  btnClosePastaReunioes = document.getElementById('btnClosePastaReunioes');
  btnClosePastaReunioes.onclick = fecharPastasReunioes;
    
    document.getElementById('cardGravar').onclick = abrirGravador;
    btnCloseGravador.onclick = fecharGravador;
    btnGravar.onclick  = iniciarGravacao;
    btnPausar.onclick  = pausarGravacao;
    btnParar.onclick   = pararGravacao;
    btnUpload.onclick  = salvarNoDriveResumable;



modalLerProjeto    = document.getElementById('modalLerProjeto');
btnCloseLerProjeto = document.getElementById('btnCloseLerProjeto');
inputPdf           = document.getElementById('inputPdf');
pdfFileName        = document.getElementById('pdfFileName');
btnUploadPdf       = document.getElementById('btnUploadPdf');
statusMsgPdf       = document.getElementById('statusMsgPdf');

document.getElementById('cardEnviarPdf').onclick = abrirLerProjeto;
btnCloseLerProjeto.onclick = fecharLerProjeto;
btnUploadPdf.onclick = salvarPdfNoDrive;

inputPdf.onchange = function() {
  const file = inputPdf.files[0];
  if (file && file.type === "application/pdf") {
    pdfFileName.textContent = "Selecionado: " + file.name;
    btnUploadPdf.style.display = 'block';
    pdfBlobGlobal = file;
  } else {
    pdfFileName.textContent = "Selecione um arquivo PDF v√°lido.";
    btnUploadPdf.style.display = 'none';
    pdfBlobGlobal = null;
  }
};



  };




  function handleTokenResponse(tokenResponse) {
  if (tokenResponse && tokenResponse.access_token) {
    accessToken = tokenResponse.access_token;
    statusMsg.textContent = "Google Drive conectado.";
    getUserInfoGoogle();
  } else {
    statusMsg.textContent = "Erro na autentica√ß√£o.";
  }
}

  


  // GRAVADOR  

  function abrirGravador() {
    modalGravador.classList.add('open');
    resetarGravador();
  }
  function fecharGravador() {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') mediaRecorder.stop();
    modalGravador.classList.remove('open');
    resetarGravador();
  }

  function iniciarGravacao() {
    if (!navigator.mediaDevices || !window.MediaRecorder) {
      alert("Seu navegador n√£o suporta grava√ß√£o de √°udio!");
      return;
    }
    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];
      mediaRecorder.ondataavailable = e => { if (e.data.size > 0) audioChunks.push(e.data); };
      mediaRecorder.onstart = () => {
        btnGravar.disabled = true; btnPausar.disabled = false; btnParar.disabled = false;
        statusMsg.textContent = 'Gravando...';
        audioPlayer.style.display = 'none';
        btnUpload.style.display = 'none';
      };
      mediaRecorder.onpause = () => { statusMsg.textContent = 'Grava√ß√£o pausada.'; };
      mediaRecorder.onresume = () => { statusMsg.textContent = 'Gravando...'; };
      mediaRecorder.onstop = () => {
        audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        convertToMp3WithProcessing(audioBlob).then(mp3Blob => {
          audioPlayer.src = URL.createObjectURL(mp3Blob);
          audioPlayer.style.display = 'block';
          btnUpload.style.display = 'block';
          statusMsg.textContent = 'Grava√ß√£o finalizada. Clique em "Salvar no Google Drive".';
          audioBlobGlobal = mp3Blob;
        }).catch((err) => {
          console.error("Erro na convers√£o/processamento:", err);
          statusMsg.textContent = 'Falha na convers√£o para MP3.';
          audioBlobGlobal = audioBlob;
        });
      };
      mediaRecorder.start();
    }).catch(err => {
      statusMsg.textContent = 'Erro ao acessar o microfone: ' + err.message;
      alert('Erro ao acessar o microfone: ' + err.message);
    });
  }
  function pausarGravacao() {
    if (!mediaRecorder) return;
    if (mediaRecorder.state === 'recording') {
      mediaRecorder.pause();
      btnPausar.textContent = "‚ñ∂Ô∏è Retomar";
      statusMsg.textContent = 'Grava√ß√£o pausada.';
    } else if (mediaRecorder.state === 'paused') {
      mediaRecorder.resume();
      btnPausar.textContent = "‚è∏Ô∏è Pausar";
      statusMsg.textContent = 'Gravando...';
    }
  }
  function pararGravacao() {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') {
      mediaRecorder.stop();
      btnGravar.disabled = false; btnPausar.disabled = true; btnPausar.textContent = "‚è∏Ô∏è Pausar"; btnParar.disabled = true;
    }
  }
  function resetarGravador() {
    btnGravar.disabled = false;
    btnPausar.disabled = true;
    btnPausar.textContent = "‚è∏Ô∏è Pausar";
    btnParar.disabled = true;
    audioPlayer.src = "";
    audioPlayer.style.display = 'none';
    btnUpload.style.display = 'none';
    statusMsg.textContent = '';
    audioBlobGlobal = null;
  }

  function convertToMp3WithProcessing(webmBlob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = function () {
        const arrayBuffer = this.result;
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        audioContext.decodeAudioData(arrayBuffer).then(audioBuffer => {
          const offlineCtx = new OfflineAudioContext(1, audioBuffer.length, audioBuffer.sampleRate);
          let input;
          if (audioBuffer.numberOfChannels > 1) {
            const left = audioBuffer.getChannelData(0);
            const right = audioBuffer.getChannelData(1);
            const mono = offlineCtx.createBuffer(1, audioBuffer.length, audioBuffer.sampleRate);
            const monoData = mono.getChannelData(0);
            for (let i = 0; i < audioBuffer.length; i++) {
              monoData[i] = 0.5 * (left[i] + right[i]);
            }
            input = offlineCtx.createBufferSource();
            input.buffer = mono;
          } else {
            input = offlineCtx.createBufferSource();
            input.buffer = audioBuffer;
          }
          const highpass = offlineCtx.createBiquadFilter();
          highpass.type = "highpass";
          highpass.frequency.value = 130;
          const lowpass = offlineCtx.createBiquadFilter();
          lowpass.type = "lowpass";
          lowpass.frequency.value = 8000;
          const gain = offlineCtx.createGain();
          gain.gain.value = 2.5;
          input.connect(highpass);
          highpass.connect(lowpass);
          lowpass.connect(gain);
          gain.connect(offlineCtx.destination);
          input.start();
          offlineCtx.startRendering().then(processedBuffer => {
            const samples = processedBuffer.getChannelData(0);
            const sampleRate = processedBuffer.sampleRate;
            const mp3Encoder = new lamejs.Mp3Encoder(1, sampleRate, 96);
            const intSamples = new Int16Array(samples.length);
            for (let i = 0; i < samples.length; i++) {
              intSamples[i] = Math.max(-32768, Math.min(32767, samples[i] * 32767));
            }
            const maxSamples = 1152;
            let mp3Data = [];
            for (let i = 0; i < intSamples.length; i += maxSamples) {
              const sampleChunk = intSamples.subarray(i, i + maxSamples);
              const mp3buf = mp3Encoder.encodeBuffer(sampleChunk);
              if (mp3buf.length > 0) mp3Data.push(new Int8Array(mp3buf));
            }
            const endBuf = mp3Encoder.flush();
            if (endBuf.length > 0) mp3Data.push(new Int8Array(endBuf));
            const mp3Blob = new Blob(mp3Data, { type: 'audio/mp3' });
            resolve(mp3Blob);
          }).catch(reject);
        }).catch(reject);
      };
      reader.onerror = reject;
      reader.readAsArrayBuffer(webmBlob);
    });
  }
  

  function splitBlob(blob, partSize) {
    const parts = [];
    let offset = 0;
    while (offset < blob.size) {
      const end = Math.min(offset + partSize, blob.size);
      parts.push(blob.slice(offset, end, blob.type));
      offset = end;
    }
    return parts;
  }
  function getNextFileNumber(tipo) {
    const key = 'contador_' + tipo;
    let n = Number(localStorage.getItem(key)) || 1;
    localStorage.setItem(key, n + 1);
    return n;
  }

  async function salvarNoDriveResumable() {
    if (!accessToken) { alert("Voc√™ precisa conectar com o Google Drive antes."); return; }
    if (!audioBlobGlobal) { alert("Nenhum √°udio para enviar."); return; }
    statusMsg.textContent = "Processando √°udio para upload...";
    const partes = splitBlob(audioBlobGlobal, MAX_AUDIO_CHUNK);
    for (let i = 0; i < partes.length; i++) {
      const parte = partes[i], parteNum = i + 1;
      statusMsg.textContent = ` parte ${parteNum} de ${partes.length}...`;
      const metadata = {
        name: `audio_reuniao_${getNextFileNumber('audio')}_parte${parteNum}.mp3`,
        mimeType: parte.type, parents: [PASTA_ATAS_ID]
      };
      const start = await fetch(
        "https://www.googleapis.com/upload/drive/v3/files?uploadType=resumable&fields=id",
        {
          method: "POST",
          headers: {
            "Authorization": "Bearer " + accessToken,
            "Content-Type": "application/json; charset=UTF-8",
            "X-Upload-Content-Type": parte.type
          },
          body: JSON.stringify(metadata)
        }
      );
      const uploadURL = start.headers.get("Location");
      if (!uploadURL) { statusMsg.textContent = "Falha ao criar sess√£o para parte " + parteNum; return; }
      const put = await fetch(uploadURL, {
        method: "PUT",
        headers: {
          "Content-Type": parte.type,
          "Content-Length": parte.size,
          "Content-Range": `bytes 0-${parte.size - 1}/${parte.size}`
        },
        body: parte
      });
      if (put.ok) {
        const file = await put.json();
        statusMsg.innerHTML += `<br>Parte ${parteNum} enviada! <a href="https://drive.google.com/file/d/${file.id}/view" target="_blank">Abrir</a>`;
      } else {
        statusMsg.textContent = "Erro ao enviar parte " + parteNum + ": " + put.status;
        return;
      }
    }
    statusMsg.innerHTML += "<br>Upload conclu√≠do! Todas as partes foram enviadas.";
  }


 function abrirPastasReunioes() {
  modalPastaReunioes.classList.add('open');
  listarArquivosReunioes();
}

function fecharPastasReunioes() {
  modalPastaReunioes.classList.remove('open');
  document.getElementById('listaArquivosReunioesUsuario').innerHTML = "";
  document.getElementById('listaArquivosReunioesAutomatizados').innerHTML = "";
  document.getElementById('statusMsgReunioes').textContent = "";
}

 async function listarArquivosReunioes() {
  if (!accessToken) {
    document.getElementById('statusMsgReunioes').textContent = 'Conecte com o Google Drive.';
    return;
  }
  document.getElementById('statusMsgReunioes').textContent = 'Carregando arquivos...';

  // Helper interna para buscar arquivos de cada pasta
  async function buscarArquivos(pastaId) {
    const url = `https://www.googleapis.com/drive/v3/files?q='${pastaId}' in parents&fields=files(id,name,mimeType,webViewLink,createdTime,owners,permissions)&orderBy=createdTime desc&supportsAllDrives=true&includeItemsFromAllDrives=true`;
    const resp = await fetch(url, { headers: { 'Authorization': 'Bearer ' + accessToken } });
    const data = await resp.json();
    return data.files || [];
  }

  try {
    // Busca nas duas pastas
    const [arquivosUsuario, arquivosAutomatizados] = await Promise.all([
      buscarArquivos(PASTA_ATAS_ID),
      buscarArquivos(PASTA_ATAS_AUTOMATIZADAS_ID)
    ]);

    // Lista de arquivos do usu√°rio (√°udio bruto)
    let htmlUsuario = '<ul style="list-style:none;padding:0;">';
    arquivosUsuario.forEach(arq => {
      let icon = "üìÑ";
      if (arq.mimeType.startsWith("audio/")) icon = "üéµ";
      else if (arq.mimeType === "text/html") icon = "üåê";
      htmlUsuario += `<li style="margin-bottom:12px;">
        ${icon} <a href="${arq.webViewLink}" target="_blank" style="font-size:1.05rem;">${arq.name}</a>
        <span style="color:#9bbdfa; font-size:0.92rem;"> (${new Date(arq.createdTime).toLocaleString()})</span>
        <button onclick="excluirArquivoDrive('${arq.id}', this)" title="Excluir" style="margin-left:10px; color:#c00; background:none; border:none; font-size:1.2rem; cursor:pointer;">üóëÔ∏è</button>
      </li>`;
    });
    htmlUsuario += '</ul>';

    // Lista de arquivos automatizados (atas)
    let htmlAutomatizados = '<ul style="list-style:none;padding:0;">';
    arquivosAutomatizados.forEach(arq => {
      let icon = "üß†";
      if (arq.mimeType.startsWith("audio/")) icon = "üéµ";
      else if (arq.mimeType === "application/pdf") icon = "üìÑ";
      else if (arq.mimeType === "text/html") icon = "üåê";
      else if (arq.mimeType === "image/png") icon = "üñºÔ∏è";
      htmlAutomatizados += `<li style="margin-bottom:12px;">
        ${icon} <a href="${arq.webViewLink}" target="_blank" style="font-size:1.05rem;">${arq.name}</a>
        <span style="color:#9bbdfa; font-size:0.92rem;"> (${new Date(arq.createdTime).toLocaleString()})</span>
        <button onclick="excluirArquivoDrive('${arq.id}', this)" title="Excluir" style="margin-left:10px; color:#c00; background:none; border:none; font-size:1.2rem; cursor:pointer;">üóëÔ∏è</button>
      </li>`;
    });
    htmlAutomatizados += '</ul>';

    document.getElementById('listaArquivosReunioesUsuario').innerHTML = htmlUsuario;
    document.getElementById('listaArquivosReunioesAutomatizados').innerHTML = htmlAutomatizados;
    document.getElementById('statusMsgReunioes').textContent = '';
  } catch (e) {
    document.getElementById('statusMsgReunioes').textContent = 'Erro ao buscar arquivos.';
  }
} 


async function excluirArquivoDrive(fileId, btn) {
  if (!confirm('Tem certeza que deseja excluir este arquivo?')) return;
  if (!accessToken) { alert("N√£o autenticado!"); return; }
  btn.disabled = true;
  try {
    let resp = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}`,
      {
        method: 'DELETE',
        headers: { 'Authorization': 'Bearer ' + accessToken }
      }
    );
    if (resp.status === 204) {
      alert('Arquivo exclu√≠do!');
      listarArquivosReunioes && listarArquivosReunioes();
    } else {
      alert('Erro ao excluir.');
    }
  } catch (e) {
    alert('Erro ao excluir arquivo.');
  }
  btn.disabled = false;
}

async function salvarPdfNoDrive() {
  if (!accessToken) {
    alert("Voc√™ precisa conectar com o Google Drive antes de salvar.");
    return;
  }
  if (!pdfBlobGlobal) {
    alert("Nenhum PDF selecionado.");
    return;
  }
  statusMsgPdf.textContent = 'Enviando PDF para o Google Drive...';
  const metadata = {
    name: pdfBlobGlobal.name,
    mimeType: pdfBlobGlobal.type,
    parents: [PASTA_RELATORIOS_ID]
  };
  const form = new FormData();
  form.append('metadata', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));
  form.append('file', pdfBlobGlobal);

  try {
    const response = await fetch('https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields=id,webViewLink', {
      method: 'POST',
      headers: new Headers({ 'Authorization': 'Bearer ' + accessToken }),
      body: form,
    });
    const result = await response.json();
        if(result.id){
            statusMsgPdf.innerHTML = 'PDF enviado! <a href="https://drive.google.com/file/d/' + result.id + '/view" target="_blank">Abrir arquivo</a>';
        }else{
            statusMsgPdf.textContent = 'Falha ao enviar: ' + (result.error && result.error.message ? result.error.message : 'Erro desconhecido');
        }
    } catch(e){
        statusMsgPdf.textContent = 'Erro na conex√£o com o Google Drive.';
    }
}

  

  async function getUserInfoGoogle() {
  if (!accessToken) return;
  try {
    const resp = await fetch('https://www.googleapis.com/oauth2/v3/userinfo', {
      headers: { 'Authorization': 'Bearer ' + accessToken }
    });
    const data = await resp.json();
    // Troca logo pela foto do usu√°rio Google
    if (data.picture) {
      profileLogo.src = data.picture;
      profileLogo.alt = "Foto do usu√°rio";
    }
    // Mostra nome do usu√°rio abaixo da logo
    if (data.name) {
      userNameSpan.textContent = data.name;
    } else {
      userNameSpan.textContent = "";
    }
    // Mensagem de status conectada
    statusMsg.textContent = `Conectado como ${data.name || data.email || 'usu√°rio Google'}`;
  } catch (e) {
    statusMsg.textContent = "Erro ao buscar dados do usu√°rio Google.";
  }
}

  function googleSignOut() {
  accessToken = '';
  profileLogo.src = "https://drive.google.com/thumbnail?id=1xG9c2LJaXOM6O6vLhU-8zt_rTl272tbg";
  profileLogo.alt = "Logo";
  userNameSpan.textContent = "";
  statusMsg.textContent = "Fa√ßa login para conectar ao Google Drive.";
}

  function abrirLerProjeto() {
  modalLerProjeto.classList.add('open');
  resetarLerProjeto();
}
function fecharLerProjeto() {
  modalLerProjeto.classList.remove('open');
  resetarLerProjeto();
}
function resetarLerProjeto() {
  inputPdf.value = "";
  pdfFileName.textContent = "";
  btnUploadPdf.style.display = 'none';
  statusMsgPdf.textContent = "";
  pdfBlobGlobal = null;
}


  


</script>


  <!-- MODAL PASTA ATAS DE REUNI√ÉO -->
<div class="modal-bg" id="modalPastaReunioes">
  <div class="modal-main" style="min-width:350px;max-width:98vw;">
    <button class="close-btn" id="btnClosePastaReunioes" type="button">&times;</button>
    <h3>Lista de arquivos</h3>
    <div style="display:flex; gap:24px; width:100%;">
      <div style="flex:1; border-right:2px solid #e0e4ee; padding-right:12px;">
        <div style="font-weight:600; color:#3576f6; margin-bottom:4px;">√Åudio bruto do usu√°rio</div>
        <div id="listaArquivosReunioesUsuario" style="max-height:270px; overflow:auto;"></div>
      </div>
      <div style="flex:1; padding-left:12px;">
        <div style="font-weight:600; color:#2254a6; margin-bottom:4px;">ATA da reuni√£o</div>
        <div id="listaArquivosReunioesAutomatizados" style="max-height:270px; overflow:auto;"></div>
      </div>
    </div>
    <div id="statusMsgReunioes" class="status-msg"></div>
  </div>
</div>

</body>
</html>
